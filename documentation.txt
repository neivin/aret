class Crop
This table contains a master list of all crops that are recognized by this application, and a small description of the crop

class Employee
This is the ARET Employee table for the database, contains all pertinent
information for employees
Ambiguous Attributes:
user_type - integer corresponding to different user types: 1 admin, 2 researcher, 3 ext group, 4 ext off/agent
region - integer corresponding to the 28 different regions an employee can be responsible for
Methods:
__repr__: returns a printable representation of the employee's email
hash_password: encrypts password using sql-alchemy's built in encryption method
verify_password: verifies the provided password using the password_hash and sqlalchemy's verify method
serialize - formats and returns information in a dictionary format

class Farmer
This is the Farmer table for the database, contains all pertinent information for the farmers of Malawi that use this application
Ambiguous Attributes:
region - integer corresponding to the 28 different regions a farmer can live in
Methods:
__repr__: returns a printable representation of the farmer's email
hash_password: encrypts password using sql-alchemy's built in encryption method
verify_password: verifies the provided password using the password_hash and sqlalchemy's verify method
serialize - formats and returns information in a dictionary format


# method: get_farmers()
# URL: /api/farmers/all
#
# this method returns all farmers infomation as a json list through URL

# method: new_farmer()
# URL: /api/farmers/new
#
# this method create a new farmer into database
# the infomations must be given are farmer email and password through URL
# it returns the primary key of farmer and the farmer email

# method: update_farmer
# URL: /api/farmers/update
#
# this method update a farmer's information through URL
# the information must be given is farmer email
# it returns the changed json table

# method: login_user()
# URL: /api/farmers/login
#
# the farmer email and password must be given through URL
# it returns the login status and farmer email as a json table

# method: query_farmers()
# URL: /api/farmers/query
#
# this method is a filter farmer's age or region
# one of them or both must be given
# return all farmers satisfy the filter condition as a json list
